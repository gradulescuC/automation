BDD = Behaviour Driven Development
	  O abordare de software development in centrul careia stau scenarii de testare bazate pe asteptarile functionale ale clientului pentru aplicatie

	  Atunci cand dezvoltam o aplicatie cu BDD lucrurile se vor desfasura in felul urmator:
	  1. Definim scenariile de testare intr-un limbaj comun, de regula engleza, care sa fie inteles de catre toti participantii si persoanele implicate in proiect. Scenariile de testare or sa fie scrise intr-un limbaj numit Gherkin
	  2. Definim testele automate care sa acopere scenariile definite mai sus. Rulam testele, si asteptarea este ca acestea sa fie failed, deoarece codul inca nu a fost scris
	  3. Scriem codul care sa implementeze aplicatia plecand de la testele automate scrise anterior, rulam din nou testele si de data asta asteptarea e ca acele teste sa fie passed
	  4. Daca sunt teste failed, atunci o sa raportam bug-uri , care ulterior or sa fie fixate, si apoi o sa reluam procesul de rulare a testelor
	  5. Repetam pasul 4 pana cand toate testele sunt passed


	  Avantaje:
	  1. Oricine se va uita peste suita noastra de teste automate va intelege usor ce am testat si ce functionalitati ale aplicatiei au fost acoperite
	  2. Focusul / atentia se muta pe scenariile de testare, astfel incat sansele de a asigura calitatea aplicatiei cresc


BDD este o abordare derivata din TDD (Test Driven Development)

TDD = O abordare de software development in centrul careia stau teste automate scrise pentru testarea aplicatiei
	  Atunci cand dezvoltam o aplicatie cu BDD lucrurile se vor desfasura in felul urmator:
	  1. Definim testele automate care sa acopere functionalitatile de business cerute de catre client. Rulam testele, si asteptarea este ca acestea sa fie failed, deoarece codul inca nu a fost scris
	  2. Scriem codul care sa implementeze aplicatia plecand de la testele automate scrise anterior, rulam din nou testele si de data asta asteptarea e ca acele teste sa fie passed
	  3. Daca sunt teste failed, atunci o sa raportam bug-uri, care ulterior or sa fie fixate, si apoi o sa reluam procesul de rulare a testelor
	  4. Repetam pasul 4 pana cand toate testele sunt passed



Diferenta intre TDD si BDD este ca la BDD se pune accentul pe scenarii (adica se pleaca de la scenarii), la TDD se pune accentul pe teste (adica se pleaca de la teste)
BDD are in plus fata de TDD descrierea scenariilor de business in limbajul gherkin salvate in niste fisiere numite feature files

In python BDD-ul este implementat prin intermediul librariei behave
In Java (posibil si alte limbaje) BDD-ul este implementat prin intermediul librariei cucumber


Un feature file este format din urmatoarele componente:
1. Feature to be tested = O functionalitate mai mare compusa din mai multe subfunctionalitati
2. Scenario = Un use case / o actiune sau set de actiuni pe care le face utilizatorul si care duc la un anumit rezultat
3. Scenario steps = Instructiuni / actiuni individuale pe care utilizatorul le face pentru a obtine un anumit rezultat

Echivalentul in Jira (Test management tool) al componentelor unui feature file
Feature = Epic
Scenario = Story
Scenario steps = Story description


Acceptance criteria = conditii pe care trebuie sa le indeplineasca un scenariu pentru ca acesta sa fie considerat passed
                            (ok, functional, util pentru client)

Gherkin = Un limbaj descriptiv care este folosit pentru maparea testelor automate cu o descriere de business usor de inteles
                de catre toti participantii la proiect, chiar daca nu au cunostinte tehnice
          Se bazeaza pe cateva cuvinte cheie:
          - feature = o functionalitate majora care poate fi testata
          - scenario = un scenariu specific / o actiune sau serie de actiuni pe care le face utilizatorul pentru a obtine un beneficiu
          - scenario outline = un scenariu mai complex cu mai multe variante de input
          - given = contextul in care se desfasoara actiunea
          - when = actiunile pe care le face utilizatorul
          - then = rezultatul pe care ne asteptam sa il primim atunci cand efectuam actiunile de mai sus
          - background = pasi de tipul given care sunt valabili pentru mai multe scenarii (pentru a evita duplicarea codului)